{"version":3,"sources":["Data/MyFace1.png","Pages/About.jsx","Components/AppNavBar.jsx","Pages/Projects.jsx","Pages/MainPage.jsx","Pages/Contact.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TextWrapper","styled","p","ImageWrapper","img","HeaderWrapper","h2","About","src","require","alt","NavBarWrap","div","NavLinkText","span","props","isActive","AppNavBar","isActiveRoute","activeRoute","route","Navbar","expand","className","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","NavDropdown","title","Item","a","Projects","MainPage","location","useLocation","pathname","Contact","App","path","render","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wKAAAA,EAAOC,QAAU,IAA0B,qC,mhBCI3C,IAAMC,EAAcC,IAAOC,EAAV,KAMXC,EAAeF,IAAOG,IAAV,KAQZC,EAAgBJ,IAAOK,GAAV,KAkBJC,EAZD,WACZ,OACE,6BACE,kBAACF,EAAD,iBACA,kBAACF,EAAD,CAAcK,IAAKC,EAAQ,IAAwBC,IAAI,SACvD,kBAACV,EAAD,+6B,oRCzBN,IAAMW,EAAaV,IAAOW,IAAV,KAOVC,EAAcZ,IAAOa,KAAV,KACN,SAAAC,GAAK,OAAIA,EAAMC,UAAY,SA6CvBC,EAnCG,SAACF,GAAU,IAGrBG,EAPS,SAACC,GAAD,OAAiB,SAACC,GAAD,OAChCD,IAAgBC,GAMMJ,CADED,EAAhBI,aAGR,OACE,kBAACR,EAAD,KACE,kBAACU,EAAA,EAAD,CAAQC,OAAO,KAAKC,UAAU,eAC5B,kBAACF,EAAA,EAAOG,MAAR,CAAcD,UAAU,eAAeE,KAAK,KAA5C,eACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,yBAClB,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIC,KAAL,CAAUR,UAAU,eAAeE,KAAK,wBACtC,kBAACZ,EAAD,CAAaG,SAAUE,EAAc,yBAArC,UAEF,kBAACY,EAAA,EAAIC,KAAL,CAAUR,UAAU,eAAeE,KAAK,2BACtC,kBAACZ,EAAD,CAAaG,SAAUE,EAAc,4BAArC,aAEF,kBAACY,EAAA,EAAIC,KAAL,CAAUR,UAAU,eAAeE,KAAK,0BACtC,kBAACZ,EAAD,CAAaG,SAAUE,EAAc,2BAArC,aAGJ,kBAACY,EAAA,EAAD,CAAKP,UAAY,WACf,kBAACS,EAAA,EAAD,CAAaC,MAAM,YAAYJ,GAAG,2BAChC,kBAACG,EAAA,EAAYE,KAAb,CAAkBT,KAAK,eAAvB,aACA,kBAACO,EAAA,EAAYE,KAAb,CAAkBT,KAAK,eAAvB,aACA,kBAACO,EAAA,EAAYE,KAAb,CAAkBT,KAAK,eAAvB,mB,4NC3Cd,IAAMzB,EAAcC,IAAOW,IAAV,KAMXmB,EAAO9B,IAAOkC,EAAV,KAaKC,EATE,WACf,OACE,kBAAC,EAAD,KACE,kBAACL,EAAD,CAAMN,KAAK,oDAAX,uBACA,kBAACM,EAAD,CAAMN,KAAK,oDAAX,yB,4QCdcxB,IAAOW,IAAV,KAMEX,IAAOW,IAAV,KANhB,IA2BeyB,EAfE,WACf,IAAMC,EAAWC,cACjB,MAAwB,kBAArBD,EAASE,SAER,6BACE,kBAAC,EAAD,CAAWrB,YAAamB,EAASE,WACjC,2BAAIF,EAASE,WAIV,kBAAC,EAAD,CAAWrB,YAAamB,EAASE,YCjB7BC,EARC,WACd,OACE,+B,QCkBWC,EAdH,WACV,OACE,6BACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAO,iBAAiBC,OAAU,kBAAM,kBAAC,EAAD,SAC/C,kBAAC,IAAD,CAAOD,KAAO,uBAAuBC,OAAU,kBAAM,kBAAC,EAAD,SACrD,kBAAC,IAAD,CAAOD,KAAO,0BAA0BC,OAAU,kBAAM,kBAAC,EAAD,SACxD,kBAAC,IAAD,CAAOD,KAAO,yBAAyBC,OAAU,kBAAM,kBAAC,EAAD,aCJ7CC,QACW,cAA7BC,OAAOR,SAASS,UAEe,UAA7BD,OAAOR,SAASS,UAEhBD,OAAOR,SAASS,SAASC,MACvB,2DCVNC,IAASL,OAAO,kBAAC,EAAD,MAASM,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0ba5c3bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/MyFace1.d6c254b0.png\";","import React from \"react\"\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst TextWrapper = styled.p`\r\n  position: fixed;\r\n  text-align: left;\r\n  left: 27rem;\r\n  top: 20vw;\r\n`\r\nconst ImageWrapper = styled.img`\r\n  position: relative;\r\n  top: 4rem;\r\n  left: 8rem;\r\n  height: 30%;\r\n  width: 30%;\r\n`\r\n\r\nconst HeaderWrapper = styled.h2`\r\n  position: absolute;\r\n  left 27rem;\r\n  top: 8rem;\r\n`\r\n\r\nconst About = () => {\r\n  return (\r\n    <div>\r\n      <HeaderWrapper>About Me</HeaderWrapper>\r\n      <ImageWrapper src={require(\"../Data/MyFace1.png\")} alt=\"duck\"/>\r\n      <TextWrapper>\r\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. In interdum nisi nisi, non facilisis lorem laoreet sit amet. Mauris ultricies ligula in gravida interdum. Praesent id nulla facilisis elit vehicula laoreet. Sed non risus feugiat, imperdiet enim eu, sollicitudin nulla. Pellentesque tristique neque ante, ac porttitor lorem mollis ut. In a libero et leo laoreet facilisis. Nunc sagittis tellus nec lacus sollicitudin, quis tempor nisi imperdiet. Phasellus hendrerit nunc at ex lobortis, vulputate vestibulum augue aliquam. Aliquam eleifend gravida arcu. Duis iaculis felis eu dignissim facilisis. Phasellus pellentesque, dui vel malesuada luctus, neque diam sagittis tortor, non auctor sapien urna eget nunc. Aliquam odio eros, auctor a enim eget, tincidunt faucibus orci. Sed sodales rhoncus neque sit amet pretium. Fusce euismod libero at urna efficitur luctus. Sed odio eros, lobortis a sapien at, dignissim efficitur eros. \r\n      </TextWrapper>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default About\r\n\r\n","import React from \"react\"\r\nimport { Navbar, Nav, NavDropdown} from 'react-bootstrap'\r\nimport styled from 'styled-components'\r\n\r\nconst NavBarWrap = styled.div`\r\n  background: #000000;\r\n  border-bottom: 1px solid #000012;\r\n  box-shadow: 0 4px 4px #000011;\r\n`\r\n\r\n// if props.isActive is true it returns green\r\nconst NavLinkText = styled.span`\r\n  color: ${props => props.isActive && 'red'};\r\n`\r\n\r\n// isActive :: String -> String -> Boolean\r\n// isActive is a function that takes a string returns a function\r\n// that takes a string that returns a boolean\r\nconst isActive = (activeRoute) => (route) => \r\n  activeRoute === route\r\n\r\n\r\nconst AppNavBar = (props) => {\r\n  // Object decompisition \r\n  const { activeRoute } = props\r\n  const isActiveRoute = isActive(activeRoute)\r\n\r\n  return (\r\n    <NavBarWrap>\r\n      <Navbar expand=\"sm\" className=\"navbar-dark\">\r\n        <Navbar.Brand className=\"app-nav-link\" href=\"/\">Liam Newton</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav>\r\n            <Nav.Link className=\"app-nav-link\" href=\"/ResumeWebsite/about\">\r\n              <NavLinkText isActive={isActiveRoute(\"/ResumeWebsite/about\")}>About</NavLinkText>\r\n            </Nav.Link>\r\n            <Nav.Link className=\"app-nav-link\" href=\"/ResumeWebsite/projects\">\r\n              <NavLinkText isActive={isActiveRoute(\"/ResumeWebsite/projects\")}>Projects</NavLinkText>\r\n            </Nav.Link>\r\n            <Nav.Link className=\"app-nav-link\" href=\"/ResumeWebsite/contact\">\r\n              <NavLinkText isActive={isActiveRoute(\"/ResumeWebsite/contact\")}>Contact</NavLinkText>\r\n            </Nav.Link>\r\n          </Nav>\r\n          <Nav className = \"mr-auto\">\r\n            <NavDropdown title=\"For Later\" id=\"collasible-nav-dropdown\">\r\n              <NavDropdown.Item href=\"/action/3.1\">Something</NavDropdown.Item>\r\n              <NavDropdown.Item href=\"/action/3.2\">Something</NavDropdown.Item>\r\n              <NavDropdown.Item href=\"/action/3.3\">Something</NavDropdown.Item>\r\n            </NavDropdown>\r\n          </Nav>\r\n          </Navbar.Collapse>\r\n      </Navbar>\r\n    </NavBarWrap>\r\n  )\r\n}\r\n\r\nexport default AppNavBar","import React from \"react\"\r\nimport { useLocation } from \"react-router-dom\"\r\nimport AppNavBar from \"../Components/AppNavBar\"\r\nimport styled from 'styled-components'\r\n\r\nconst TextWrapper = styled.div`\r\n  text-align: center;\r\n  margin: auto;\r\n  max-width: 800px;\r\n`\r\n\r\nconst Link = styled.a`\r\n  color: black;\r\n`\r\n\r\nconst Projects = () => {\r\n  return (\r\n    <TextWrapper>\r\n      <Link href=\"https://github.com/CodesReallyWell/CryptoProject\">Data Mining Project</Link>\r\n      <Link href=\"https://github.com/CodesReallyWell/ResumeWebsite\">Website Source Code</Link>\r\n    </TextWrapper>\r\n  )\r\n}\r\n\r\nexport default Projects\r\n","import React from \"react\"\r\nimport { useLocation } from \"react-router-dom\"\r\nimport AppNavBar from \"../Components/AppNavBar\"\r\nimport styled from 'styled-components'\r\n\r\nconst TextWrapper = styled.div`\r\n  color: white;\r\n  padding: 0em 1em;\r\n  max-width: 800px;\r\n`\r\n\r\nconst ImgWrapper = styled.div`\r\n  margin: 16em;\r\n  padding: 1em 10vw;\r\n  max-width: 800px;\r\n`\r\n\r\nconst MainPage = () => {\r\n  const location = useLocation()\r\n  if(location.pathname == \"/ResumeWebsite\"){\r\n    return (\r\n      <div>\r\n        <AppNavBar activeRoute={location.pathname}></AppNavBar>\r\n        <p>{location.pathname}</p>\r\n      </div>\r\n      );\r\n  }else{\r\n    return(<AppNavBar activeRoute={location.pathname}></AppNavBar>)\r\n  }\r\n  \r\n}\r\n\r\nexport default MainPage\r\n","import React from \"react\"\r\n\r\nconst Contact = () => {\r\n  return (\r\n    <div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Contact\r\n","import React from 'react'\nimport './App.css'\nimport About from './Pages/About'\nimport Projects from './Pages/Projects'\nimport MainPage from './Pages/MainPage'\nimport Contact from './Pages/Contact'\nimport { BrowserRouter, Route } from 'react-router-dom'\n\nconst App = () => {\n  return (\n    <div>\n      <div>\n        <BrowserRouter>\n          <Route path = \"/ResumeWebsite\" render = {() => <MainPage></MainPage>}/>\n          <Route path = \"/ResumeWebsite/about\" render = {() => <About></About>}/>\n          <Route path = \"/ResumeWebsite/projects\" render = {() => <Projects></Projects>}/>\n          <Route path = \"/ResumeWebsite/contact\" render = {() => <Contact></Contact>}/>\n        </BrowserRouter>\n      </div>\n    </div>\n  )\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}